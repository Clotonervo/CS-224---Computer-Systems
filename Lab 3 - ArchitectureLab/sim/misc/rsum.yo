                            | # Samuel Hopkins h0pkins3
                            | # Execution begins at address 0 
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp      # Set up stack pointer
0x00a: 2045                 |     rrmovq %rsp, %rbp
0x00c: 804800000000000000   |     call main       # Execute main program
0x015: 00                   |     halt            # Terminate program 
                            | 
                            | # List of 3 elements
0x018:                      |     .align 8
0x018:                      | list:  
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048:                      | main:   
0x048: 30f71800000000000000 |     irmovq list,%rdi
0x052: 805c00000000000000   |     call rsum_list     # sum_list
0x05b: 90                   |     ret
                            | 
                            | # sum_list(list_ptr ls)
                            | # start in %rdi
0x05c:                      | rsum_list:    
0x05c: 6277                 |     andq %rdi,%rdi       # Set CC
0x05e: 709900000000000000   |     jmp     test         # Goto test
0x067:                      | loop:   
0x067: 30f00000000000000000 |     irmovq $0,%rax
0x071: 50a70000000000000000 |     mrmovq (%rdi),%r10   # Get value in pointer
0x07b: 60a0                 |     addq %r10,%rax       # Add to val
0x07d: 50770800000000000000 |     mrmovq 8(%rdi),%rdi  # move next pointer to rdi
0x087: 2003                 |     rrmovq %rax, %rbx
0x089: a03f                 |     pushq %rbx
0x08b: 805c00000000000000   |     call rsum_list
0x094: b03f                 |     popq %rbx
0x096: 6030                 |     addq %rbx, %rax
0x098: 90                   |     ret
0x099:                      | test:   
0x099: 746700000000000000   |     jne    loop          # Stop when 0
0x0a2: 6300                 |     xorq %rax,%rax       # val = 0;
0x0a4: 90                   |     ret                  # Return
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |     .pos 0x200
0x200:                      | stack:
                            | 
                            |     
