                            | # Samuel Hopkins h0pkins3
                            | # Execution begins at address 0 
0x000:                      |     .pos 0
0x000: 30f40004000000000000 |     irmovq stack, %rsp      # Set up stack pointer
0x00a: 2045                 |     rrmovq %rsp, %rbp
0x00c: 804800000000000000   |     call main       # Execute main program
0x015: 00                   |     halt            # Terminate program 
                            | 
                            | # List of 3 elements
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | 
0x048:                      | main:   
0x048: 30f71800000000000000 |     irmovq src,%rdi
0x052: 30f63000000000000000 |     irmovq dest,%rsi
0x05c: 30f20300000000000000 |     irmovq $3,%rdx
0x066: 807000000000000000   |     call copy_block     
0x06f: 90                   |     ret
                            | 
                            | # copy_block(long *src, long *dest, long len)
                            | # src rdi, dest rsi, len rdx
0x070:                      | copy_block:    
0x070: 6222                 |     andq %rdx,%rdx       # Set CC
0x072: 30f90100000000000000 |     irmovq $1,%r9
0x07c: 30f80800000000000000 |     irmovq $8,%r8
0x086: 30f00000000000000000 |     irmovq $0,%rax       # set result = 0
0x090: 70b500000000000000   |     jmp     test         # Goto test
0x099:                      | loop:   
0x099: 50a70000000000000000 |     mrmovq (%rdi),%r10    # val = *src
0x0a3: 6087                 |     addq %r8,%rdi       # src++
0x0a5: 40a60000000000000000 |     rmmovq %r10,(%rsi)    # *dest = val
0x0af: 6086                 |     addq %r8,%rsi        # dest++
0x0b1: 63a0                 |     xorq %r10,%rax      # result ^= val
0x0b3: 6192                 |     subq %r9,%rdx        # len--
0x0b5:                      | test:   
0x0b5: 749900000000000000   |     jne    loop          # Stop when 0
0x0be: 90                   |     ret                  # Return
                            | 
                            | # Stack starts here and grows to lower addresses
0x400:                      |     .pos 0x400
0x400:                      | stack:
                            | 
                            |     
