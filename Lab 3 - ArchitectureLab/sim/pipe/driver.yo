                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f69804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80f602000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x03b: 30f00000000000000000 |     irmovq $0,%rax      # count = 0;
0x045: c0f2f8ffffffffffffff | 	iaddq $-8,%rdx		# len < 8?
0x04f:                      | Start:
0x04f: 75d000000000000000   | 	jge Bigloop		# if so, goto Done:
0x058: c0f20500000000000000 |     iaddq $5,%rdx
0x062:                      | Start_two:
0x062: 754902000000000000   |     jge Big_loop_part_two
0x06b: c0f20500000000000000 |     iaddq $5,%rdx
0x075:                      | End:
0x075: 6222                 |     andq %rdx,%rdx
0x077: 71f502000000000000   |     jle Done
                            | 
0x080:                      | Loop:	
0x080: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x08a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x094: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x09e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0a8: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x0b2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b4: 71c700000000000000   | 	jle Npos		# if so, goto Npos:
0x0bd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0c7:                      | Npos:	
0x0c7: 707500000000000000   | 	jmp End			# if so, goto Loop:
                            | 
                            | #-------------------- BIG Loop --------------------------------
0x0d0:                      | Bigloop:
0x0d0: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x0da: 50870800000000000000 |     mrmovq 8(%rdi), %r8
0x0e4: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x0ee: 62aa                 |     andq %r10,%r10
0x0f0: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x0fa: 710d01000000000000   |     jle Npos_one
0x103: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x10d:                      | Npos_one:
0x10d: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x117: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x121: 6288                 |     andq %r8,%r8
0x123: 713601000000000000   |     jle Npos_two
0x12c: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x136:                      | Npos_two:
0x136: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x140: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)
0x14a: 62cc                 |     andq %r12,%r12
0x14c: 715f01000000000000   |     jle Npos_three
0x155: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x15f:                      | Npos_three:
0x15f: 50e72000000000000000 |     mrmovq 32(%rdi), %r14
0x169: 40d61800000000000000 |     rmmovq %r13, 24(%rsi)
0x173: 62dd                 |     andq %r13,%r13
0x175: 718801000000000000   |     jle Npos_four
0x17e: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x188:                      | Npos_four:
0x188: 50a72800000000000000 |     mrmovq 40(%rdi), %r10
0x192: 40e62000000000000000 |     rmmovq %r14, 32(%rsi)
0x19c: 62ee                 |     andq %r14,%r14
0x19e: 71b101000000000000   |     jle Npos_five
0x1a7: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x1b1:                      | Npos_five:
0x1b1: 50c73000000000000000 |     mrmovq 48(%rdi), %r12
0x1bb: 40a62800000000000000 |     rmmovq %r10, 40(%rsi)
0x1c5: 62aa                 |     andq %r10,%r10
0x1c7: 71da01000000000000   |     jle Npos_six
0x1d0: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x1da:                      | Npos_six:
0x1da: 50e73800000000000000 |     mrmovq 56(%rdi),%r14
0x1e4: 40c63000000000000000 |     rmmovq %r12, 48(%rsi)
0x1ee: 62cc                 |     andq %r12,%r12
0x1f0: 710302000000000000   |     jle Npos_seven
0x1f9: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x203:                      | Npos_seven:
0x203: 40e63800000000000000 |     rmmovq %r14, 56(%rsi)
0x20d: c0f74000000000000000 |     iaddq $64,%rdi
0x217: 62ee                 |     andq %r14,%r14
0x219: 712c02000000000000   |     jle Npos_last
0x222: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x22c:                      | Npos_last:
0x22c: c0f64000000000000000 |     iaddq $64,%rsi
0x236: c0f7f8ffffffffffffff |     iaddq $-8,%rdi
0x240: 704f00000000000000   |     jmp Start
                            | 
                            | #----------------------- 4 big loop ---------------------------
0x249:                      | Big_loop_part_two:
0x249: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x253: 50870800000000000000 |     mrmovq 8(%rdi), %r8
0x25d: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x267: 62aa                 |     andq %r10,%r10
0x269: 717c02000000000000   |     jle Npos_one_part_two
0x272: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x27c:                      | Npos_one_part_two:
0x27c: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x286: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x290: 6288                 |     andq %r8,%r8
0x292: 71a502000000000000   |     jle Npos_two_part_two
0x29b: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x2a5:                      | Npos_two_part_two:
0x2a5: 50d71800000000000000 |     mrmovq 24(%rdi),%r13
0x2af: c0f71800000000000000 |     iaddq $24,%rdi
0x2b9: 40c61000000000000000 |     rmmovq %r12,16(%rsi)
0x2c3: 62cc                 |     andq %r12,%r12
0x2c5: 71d802000000000000   |     jle Npos_last_part_two
0x2ce: c0f00100000000000000 |     iaddq $1,%rax
                            | 
0x2d8:                      | Npos_last_part_two:
0x2d8: c0f61800000000000000 |     iaddq $24,%rsi
0x2e2: c0f2fbffffffffffffff |     iaddq $-5,%rdx
0x2ec: 706200000000000000   |     jmp Start_two
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2f5:                      | Done:
0x2f5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2f6:                      | End:
                            | #/* $end ncopy-ys */
0x2f6:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2f6:                      | check:
                            | 	# Return value test
0x2f6: 30fa0200000000000000 | 	irmovq $2,%r10
0x300: 61a0                 | 	subq %r10,%rax
0x302: 731e03000000000000   | 	je checkb
0x30b: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x315: 705c04000000000000   | 	jmp cdone
0x31e:                      | checkb:
                            | 	# Code length check
0x31e: 30f0f602000000000000 | 	irmovq EndFun,%rax
0x328: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x332: 6120                 | 	subq %rdx,%rax
0x334: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x33e: 6102                 | 	subq %rax,%rdx
0x340: 755c03000000000000   | 	jge checkm
0x349: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x353: 705c04000000000000   | 	jmp cdone
0x35c:                      | checkm:
0x35c: 30f29804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x366: 30f36004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x370: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x37a: 6277                 | 	andq %rdi,%rdi
0x37c: 73da03000000000000   | 	je checkpre         # Skip check if count = 0
0x385:                      | mcloop:
0x385: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x38f: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x399: 6160                 | 	subq %rsi,%rax
0x39b: 73b703000000000000   | 	je  mok
0x3a4: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x3ae: 705c04000000000000   | 	jmp cdone
0x3b7:                      | mok:
0x3b7: 30f00800000000000000 | 	irmovq $8,%rax
0x3c1: 6002                 | 	addq %rax,%rdx	  # dest ++
0x3c3: 6003                 | 	addq %rax,%rbx    # src++
0x3c5: 30f00100000000000000 | 	irmovq $1,%rax
0x3cf: 6107                 | 	subq %rax,%rdi    # cnt--
0x3d1: 768503000000000000   | 	jg mcloop
0x3da:                      | checkpre:
                            | 	# Check for corruption
0x3da: 30f29004000000000000 | 	irmovq Predest,%rdx
0x3e4: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3ee: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3f8: 6120                 | 	subq %rdx,%rax
0x3fa: 731604000000000000   | 	je checkpost
0x403: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x40d: 705c04000000000000   | 	jmp cdone
0x416:                      | checkpost:
                            | 	# Check for corruption
0x416: 30f2b804000000000000 | 	irmovq Postdest,%rdx
0x420: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x42a: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x434: 6120                 | 	subq %rdx,%rax
0x436: 735204000000000000   | 	je checkok
0x43f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x449: 705c04000000000000   | 	jmp cdone
0x452:                      | checkok:
                            | 	# Successful checks
0x452: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x45c:                      | cdone:
0x45c: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x460:                      | 	.align 8
0x460:                      | src:
0x460: 0100000000000000     | 	.quad 1
0x468: feffffffffffffff     | 	.quad -2
0x470: 0300000000000000     | 	.quad 3
0x478: fcffffffffffffff     | 	.quad -4
0x480: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x490:                      | 	.align 16
0x490:                      | Predest:
0x490: fadebc0000000000     | 	.quad 0xbcdefa
0x498:                      | dest:
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8:                      | Postdest:
0x4b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4c0:                      | .align 8
                            | # Run time stack
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
                            | 
0x540:                      | Stack:
