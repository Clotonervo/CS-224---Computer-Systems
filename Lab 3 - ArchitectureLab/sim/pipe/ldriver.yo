                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | /* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 
                            | # We added the iaddq instruction to the PIPE architecture so we would not have to assign as many constant # to registers in order to perform 
                            | # addition. Because our iaddq instruction sets the condition code, we could also replace subq commands. 
                            | #
                            | # We unrolled our loop so that a big loop ran processed eight values at a time, a medium loop processed 
                            | # four values at a time, a small loop
                            | # processed two values and a final set of statements processed the last values. In the final set of 
                            | # statements we didnâ€™t update rdi and rsi.
                            | #
                            | # After unrolling the loop we rearranged the instructions so that we minimized bubbles in the pipeline. 
                            | # For each value a call was needed to       
                            | # perform a memory to register move and a register to memory move. We added lines in between the two 
                            | # instructions so bubbles would not    
                            | # need to be injected while the second instruction waited for its dependencies to be updated.
                            | ################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
0x032: 30f00000000000000000 | irmovq $0,%rax      # count = 0
0x03c: c0f2f8ffffffffffffff | iaddq $-8,%rdx	    # len >= 8?
0x046:                      | Start:
0x046: 75bc00000000000000   |     jge Bigloop		# if so, goto Bigloop:
0x04f: c0f20400000000000000 |     iaddq $4,%rdx	# len >= 4?
0x059:                      | Start_two:
0x059: 753502000000000000   |     jge Big_loop_part_two    # if so, goto Big_loop_part_two:
0x062: c0f20200000000000000 |     iaddq $2,%rdx    # len >= 2?  
0x06c:                      | Start_three:
0x06c: 75d702000000000000   |     jge Big_loop_part_three   # if so, goto Big_loop_part_three:
0x075: c0f20200000000000000 |     iaddq $2,%rdx  #len >- 2?
0x07f:                      | End:
0x07f: 6222                 |     andq %rdx,%rdx  # len == 0?
0x081: 715003000000000000   |     jle Done  # if so, jump to end
                            | 
0x08a:                      | Loop:	
0x08a: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x094: 40a60000000000000000 |     rmmovq %r10, (%rsi)	# ...and store it to dst
0x09e: 62aa                 |     andq %r10, %r10		# val <= 0?
0x0a0: 715003000000000000   |     jle Done		# if so, goto End:
0x0a9: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x0b3: 705003000000000000   |     jmp Done
                            | 
                            | #-------------------- BIG Loop --------------------------------
0x0bc:                      | Bigloop:
0x0bc: 50a70000000000000000 |     mrmovq (%rdi), %r10 # read val from src...
0x0c6: 50870800000000000000 |     mrmovq 8(%rdi), %r8 # read next val from src...
0x0d0: 40a60000000000000000 |     rmmovq %r10, (%rsi) # ...and store it to dst
0x0da: 62aa                 |     andq %r10,%r10  # val <= 0?
0x0dc: 50c71000000000000000 |     mrmovq 16(%rdi), %r12 # read next val from src...
0x0e6: 71f900000000000000   |     jle Npos_one # if so, skip next line
0x0ef: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x0f9:                      | Npos_one:
0x0f9: 50c71000000000000000 |     mrmovq 16(%rdi), %r12 # read next val from src...
0x103: 40860800000000000000 |     rmmovq %r8, 8(%rsi) # ...and store it to dst
0x10d: 6288                 |     andq %r8,%r8 # val <= 0? 
0x10f: 712201000000000000   |     jle Npos_two # if so, skip next line
0x118: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x122:                      | Npos_two:
0x122: 50d71800000000000000 |     mrmovq 24(%rdi), %r13 # read next val from src...
0x12c: 40c61000000000000000 |     rmmovq %r12, 16(%rsi) # ...and store it to dst
0x136: 62cc                 |     andq %r12,%r12 # val <= 0?
0x138: 714b01000000000000   |     jle Npos_three # if so, skip next line
0x141: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x14b:                      | Npos_three:
0x14b: 50e72000000000000000 |     mrmovq 32(%rdi), %r14 # read next val from src...
0x155: 40d61800000000000000 |     rmmovq %r13, 24(%rsi) # ...and store it to dst
0x15f: 62dd                 |     andq %r13,%r13 # val <= 0?
0x161: 717401000000000000   |     jle Npos_four # if so, skip next line
0x16a: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x174:                      | Npos_four:
0x174: 50a72800000000000000 |     mrmovq 40(%rdi), %r10 # read next val from src...
0x17e: 40e62000000000000000 |     rmmovq %r14, 32(%rsi) # ...and store it to dst
0x188: 62ee                 |     andq %r14,%r14  # val <= 0?
0x18a: 719d01000000000000   |     jle Npos_five # if so, skip next line
0x193: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x19d:                      | Npos_five:
0x19d: 50c73000000000000000 |     mrmovq 48(%rdi), %r12 # read next val from src...
0x1a7: 40a62800000000000000 |     rmmovq %r10, 40(%rsi) # ...and store it to dst
0x1b1: 62aa                 |     andq %r10,%r10 # val <= 0?
0x1b3: 71c601000000000000   |     jle Npos_six # if so, skip next line
0x1bc: c0f00100000000000000 |     iaddq $1,%rax # count++
0x1c6:                      | Npos_six:
0x1c6: 50e73800000000000000 |     mrmovq 56(%rdi),%r14 # read next val from src...
0x1d0: 40c63000000000000000 |     rmmovq %r12, 48(%rsi) # ...and store it to dst
0x1da: 62cc                 |     andq %r12,%r12 # val <= 0?
0x1dc: 71ef01000000000000   |     jle Npos_seven # if so, skip next line
0x1e5: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x1ef:                      | Npos_seven:
0x1ef: 40e63800000000000000 |     rmmovq %r14, 56(%rsi) # ...and store it to dst
0x1f9: c0f74000000000000000 |     iaddq $64,%rdi # update rdi
0x203: 62ee                 |     andq %r14,%r14 # val <= 0?
0x205: 711802000000000000   |     jle Npos_last # if so, skip next line
0x20e: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x218:                      | Npos_last:
0x218: c0f64000000000000000 |     iaddq $64,%rsi #update rsi
0x222: c0f2f8ffffffffffffff |     iaddq $-8,%rdx #update rdx
0x22c: 704600000000000000   |     jmp Start 
                            | 
                            | #----------------------- 4 big loop ---------------------------
0x235:                      | Big_loop_part_two:
0x235: 50a70000000000000000 |     mrmovq (%rdi), %r10 # read val from src...
0x23f: 50870800000000000000 |     mrmovq 8(%rdi), %r8 # read next val from src...
0x249: 40a60000000000000000 |     rmmovq %r10, (%rsi) # ...and store it to dst
0x253: 62aa                 |     andq %r10,%r10 # val <= 0?
0x255: 716802000000000000   |     jle Npos_one_part_two # if so, skip next line
0x25e: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x268:                      | Npos_one_part_two:
0x268: 50c71000000000000000 |     mrmovq 16(%rdi), %r12 # read next val from src...
0x272: 40860800000000000000 |     rmmovq %r8, 8(%rsi) # ...and store it to dst
0x27c: 6288                 |     andq %r8,%r8 # val <= 0?
0x27e: 719102000000000000   |     jle Npos_two_part_two # if so, skip next line
0x287: c0f00100000000000000 |     iaddq $1,%rax # count++
                            | 
0x291:                      | Npos_two_part_two:
0x291: c0f71800000000000000 |     iaddq $24,%rdi #update rdi
0x29b: 40c61000000000000000 |     rmmovq %r12,16(%rsi) # ...and store it to dst
0x2a5: 62cc                 |     andq %r12,%r12 # val <= 0?
0x2a7: 71ba02000000000000   |     jle Npos_last_part_two # if so, skip next line
0x2b0: c0f00100000000000000 |     iaddq $1,%rax # count++ 
                            | 
0x2ba:                      | Npos_last_part_two:
0x2ba: c0f61800000000000000 |     iaddq $24,%rsi # update rsi
0x2c4: c0f2fdffffffffffffff |     iaddq $-3,%rdx # update rdx
0x2ce: 705900000000000000   |     jmp Start_two
                            | 
                            | #---------------------- 2 loop ---------------------------------
0x2d7:                      | Big_loop_part_three:
0x2d7: 50a70000000000000000 |     mrmovq (%rdi), %r10 # read val from src...
0x2e1: 50870800000000000000 |     mrmovq 8(%rdi), %r8 # read next val from src...
0x2eb: 40a60000000000000000 |     rmmovq %r10, (%rsi) # ...and store it to dst
0x2f5: 62aa                 |     andq %r10,%r10 # val <= 0?
0x2f7: 710a03000000000000   |     jle Npos_last_part_three # if so, skip next line
0x300: c0f00100000000000000 |     iaddq $1,%rax # count++ 
                            | 
0x30a:                      | Npos_last_part_three:
0x30a: 40860800000000000000 |     rmmovq %r8, 8(%rsi) # ...and store it to dst
0x314: c0f61000000000000000 |     iaddq $16,%rsi # update rsi
0x31e: c0f71000000000000000 |     iaddq $16,%rdi # update rdi
0x328: 6288                 |     andq %r8,%r8 # val <= 0?
0x32a: 713d03000000000000   |     jle Npos_part_three_final # if so, skip next line
0x333: c0f00100000000000000 |     iaddq $1,%rax # count++ 
                            | 
0x33d:                      | Npos_part_three_final:
0x33d: c0f2feffffffffffffff |     iaddq $-2,%rdx # update rdx
0x347: 706c00000000000000   |     jmp Start_three
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x350:                      | Done:
0x350: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x351:                      | End:
                            | #/* $end ncopy-ys */
                            | 
0x351:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x358:                      | 	.align 8
0x358:                      | src:
0x358: 0100000000000000     | 	.quad 1
0x360: feffffffffffffff     | 	.quad -2
0x368: 0300000000000000     | 	.quad 3
0x370: 0400000000000000     | 	.quad 4
0x378: fbffffffffffffff     | 	.quad -5
0x380: faffffffffffffff     | 	.quad -6
0x388: 0700000000000000     | 	.quad 7
0x390: 0800000000000000     | 	.quad 8
0x398: 0900000000000000     | 	.quad 9
0x3a0: 0a00000000000000     | 	.quad 10
0x3a8: 0b00000000000000     | 	.quad 11
0x3b0: f4ffffffffffffff     | 	.quad -12
0x3b8: 0d00000000000000     | 	.quad 13
0x3c0: 0e00000000000000     | 	.quad 14
0x3c8: 0f00000000000000     | 	.quad 15
0x3d0: f0ffffffffffffff     | 	.quad -16
0x3d8: 1100000000000000     | 	.quad 17
0x3e0: eeffffffffffffff     | 	.quad -18
0x3e8: edffffffffffffff     | 	.quad -19
0x3f0: 1400000000000000     | 	.quad 20
0x3f8: 1500000000000000     | 	.quad 21
0x400: eaffffffffffffff     | 	.quad -22
0x408: e9ffffffffffffff     | 	.quad -23
0x410: 1800000000000000     | 	.quad 24
0x418: 1900000000000000     | 	.quad 25
0x420: e6ffffffffffffff     | 	.quad -26
0x428: e5ffffffffffffff     | 	.quad -27
0x430: e4ffffffffffffff     | 	.quad -28
0x438: 1d00000000000000     | 	.quad 29
0x440: e2ffffffffffffff     | 	.quad -30
0x448: e1ffffffffffffff     | 	.quad -31
0x450: e0ffffffffffffff     | 	.quad -32
0x458: 2100000000000000     | 	.quad 33
0x460: 2200000000000000     | 	.quad 34
0x468: ddffffffffffffff     | 	.quad -35
0x470: 2400000000000000     | 	.quad 36
0x478: 2500000000000000     | 	.quad 37
0x480: daffffffffffffff     | 	.quad -38
0x488: 2700000000000000     | 	.quad 39
0x490: 2800000000000000     | 	.quad 40
0x498: d7ffffffffffffff     | 	.quad -41
0x4a0: 2a00000000000000     | 	.quad 42
0x4a8: 2b00000000000000     | 	.quad 43
0x4b0: 2c00000000000000     | 	.quad 44
0x4b8: 2d00000000000000     | 	.quad 45
0x4c0: d2ffffffffffffff     | 	.quad -46
0x4c8: d1ffffffffffffff     | 	.quad -47
0x4d0: d0ffffffffffffff     | 	.quad -48
0x4d8: cfffffffffffffff     | 	.quad -49
0x4e0: ceffffffffffffff     | 	.quad -50
0x4e8: cdffffffffffffff     | 	.quad -51
0x4f0: 3400000000000000     | 	.quad 52
0x4f8: cbffffffffffffff     | 	.quad -53
0x500: 3600000000000000     | 	.quad 54
0x508: 3700000000000000     | 	.quad 55
0x510: c8ffffffffffffff     | 	.quad -56
0x518: 3900000000000000     | 	.quad 57
0x520: c6ffffffffffffff     | 	.quad -58
0x528: c5ffffffffffffff     | 	.quad -59
0x530: c4ffffffffffffff     | 	.quad -60
0x538: c3ffffffffffffff     | 	.quad -61
0x540: c2ffffffffffffff     | 	.quad -62
0x548: c1ffffffffffffff     | 	.quad -63
0x550: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
